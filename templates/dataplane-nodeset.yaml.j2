# templates/dataplane-nodeset.yaml.j2
# OpenStackDataPlaneNodeSet configuration
{% for nodeset in dataplane_nodesets %}
---
apiVersion: dataplane.openstack.org/v1beta1
kind: OpenStackDataPlaneNodeSet
metadata:
  name: {{ nodeset.name }}
  namespace: openstack
spec:
  env:
    - name: ANSIBLE_FORCE_COLOR
      value: "True"
  {% if features.tls_enabled %}
  tlsEnabled: true
  {% endif %}
  networkAttachments:
    - ctlplane
  preProvisioned: {{ nodeset.node_template.pre_provisioned }}

  {% if not nodeset.node_template.pre_provisioned %}
  baremetalSetTemplate:
    deploymentSSHSecret: {{ nodeset.node_template.ansible_ssh_private_key_secret }}
    bmhNamespace: {{ bare_metal.namespace }}
    cloudUserName: {{ bare_metal.cloud_user_name }}
    bmhLabelSelector:
      app: openstack
    ctlplaneInterface: {{ bare_metal.provision_interface }}
  {% endif %}

  nodeTemplate:
    ansibleSSHPrivateKeySecret: {{ nodeset.node_template.ansible_ssh_private_key_secret }}
    {% if nodeset.node_template.persistent_logs_pvc %}
    extraMounts:
      - extraVolType: Logs
        volumes:
          - name: ansible-logs
            persistentVolumeClaim:
              claimName: {{ nodeset.node_template.persistent_logs_pvc }}
        mounts:
          - name: ansible-logs
            mountPath: "/runner/artifacts"
    {% endif %}
    managementNetwork: {{ nodeset.node_template.management_network }}
    ansible:
      ansibleUser: {{ nodeset.node_template.ansible_ssh_user }}
      ansiblePort: 22
      ansibleVarsFrom:
        - secretRef:
            name: subscription-manager
        - secretRef:
            name: redhat-registry
      ansibleVars:
        rhc_release: 9.4
        rhc_repositories:
        {% for repo in rhel_repositories %}
          - {{ repo }}
        {% endfor %}
        edpm_bootstrap_release_version_package: []
        edpm_network_config_os_net_config_mappings:
        {% for node in nodeset.nodes %}
          {{ node.name }}:
            nic1: {{ node.mac_address }}
        {% endfor %}
        neutron_physical_bridge_name: br-ex
        neutron_public_interface_name: eth0
        edpm_network_config_nmstate: true
        edpm_network_config_update: false
        edpm_network_config_template: |
          ---
          {% raw %}
          {% set mtu_list = [ctlplane_mtu] %}
          {% for network in nodeset_networks %}
          {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
          {%- endfor %}
          {% set min_viable_mtu = mtu_list | max %}
          network_config:
          - type: ovs_bridge
            name: {{ neutron_physical_bridge_name }}
            mtu: {{ min_viable_mtu }}
            use_dhcp: false
            dns_servers: {{ ctlplane_dns_nameservers }}
            domain: {{ dns_search_domains }}
            addresses:
            - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
            routes: {{ ctlplane_host_routes }}
            members:
            - type: interface
              name: nic1
              mtu: {{ min_viable_mtu }}
              primary: true
            {% for network in nodeset_networks %}
            - type: vlan
              mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
              vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
              addresses:
              - ip_netmask:
                {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
              routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
            {% endfor %}
          {% endraw %}

  nodes:
  {% for node in nodeset.nodes %}
    {{ node.name }}:
      hostName: {{ node.hostname }}
      networks:
      {% for net in nodeset.node_template.networks %}
        - name: {{ net }}
          subnetName: subnet1
          {% if net == 'ctlplane' %}
          defaultRoute: true
          {% endif %}
          {% if node.node_networks[net] is defined %}
          fixedIP: {{ node.node_networks[net].ip }}
          {% endif %}
      {% endfor %}
      ansible:
        ansibleHost: {{ node.ansible_host }}
        ansibleUser: {{ nodeset.node_template.ansible_ssh_user }}
        ansibleVars:
          fqdn_internal_api: {{ node.fqdn_internal_api }}
      {% if not nodeset.node_template.pre_provisioned %}
      bmhLabelSelector:
        nodeName: {{ node.name }}
      {% endif %}
  {% endfor %}
{% endfor %}