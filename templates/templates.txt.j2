# templates/nncp-interfaces.j2
# Generate interface configuration for NNCP
---
{% set network = item.0.value %}
{% set node = item.1 %}
{% if network.vlan_id %}
- name: {{ item.0.key }}
  type: vlan
  state: up
  vlan:
    base-iface: {{ network.interface }}
    id: {{ network.vlan_id }}
    reorder-headers: true
  ipv4:
    enabled: true
    dhcp: false
    address:
      - ip: {{ node.networks[item.0.key].ip }}
        prefix-length: {{ network.cidr.split('/')[1] }}
  ipv6:
    enabled: false
  mtu: {{ network.mtu }}
{% endif %}
{% if item.0.key == 'ctlplane' %}
- name: {{ network.interface }}
  type: ethernet
  state: up
  ipv4:
    enabled: true
    dhcp: false
    address:
      - ip: {{ node.networks.ctlplane.ip }}
        prefix-length: {{ network.cidr.split('/')[1] }}
  ipv6:
    enabled: false
  mtu: {{ network.mtu }}
{% endif %}
{% if item.0.key == 'octavia' and network.bridge_name is defined %}
- name: {{ network.interface }}.{{ network.vlan_id }}
  type: vlan
  state: up
  vlan:
    base-iface: {{ network.interface }}
    id: {{ network.vlan_id }}
- name: {{ network.bridge_name }}
  type: linux-bridge
  state: up
  bridge:
    options:
      stp:
        enabled: false
    port:
      - name: {{ network.interface }}.{{ network.vlan_id }}
  mtu: {{ network.mtu }}
{% endif %}

---
# templates/nad-config.j2
# NetworkAttachmentDefinition configuration
{
  "cniVersion": "0.3.1",
  "name": "{{ item.key }}",
  {% if item.key == 'octavia' and item.value.bridge_name is defined %}
  "type": "bridge",
  "bridge": "{{ item.value.bridge_name }}",
  {% else %}
  "type": "macvlan",
  "master": "{% if item.value.vlan_id %}{{ item.key }}{% else %}{{ item.value.interface }}{% endif %}",
  {% endif %}
  {% if item.value.nad_ipam_range %}
  "ipam": {
    "type": "whereabouts",
    "range": "{{ item.value.cidr }}",
    "range_start": "{{ item.value.nad_ipam_range.start }}",
    "range_end": "{{ item.value.nad_ipam_range.end }}"
    {% if item.key == 'octavia' %}
    ,
    "routes": [
      {
        "dst": "192.1.2.0/16",
        "gw": "192.0.2.150"
      }
    ]
    {% endif %}
  }
  {% endif %}
}

---
# templates/netconfig-networks.j2
# NetConfig network definitions
{% for net_name, net_config in networks.items() %}
- name: {{ net_name | capitalize }}
  dnsDomain: {{ net_config.dns_domain }}
  subnets:
    - name: subnet1
      cidr: {{ net_config.cidr }}
      {% if net_config.gateway %}
      gateway: {{ net_config.gateway }}
      {% endif %}
      {% if net_config.allocation_ranges %}
      allocationRanges:
      {% for range in net_config.allocation_ranges %}
        - start: {{ range.start }}
          end: {{ range.end }}
      {% endfor %}
      {% endif %}
      {% if net_config.exclude_addresses is defined %}
      excludeAddresses:
      {% for addr in net_config.exclude_addresses %}
        - {{ addr }}
      {% endfor %}
      {% endif %}
      {% if net_config.vlan_id %}
      vlan: {{ net_config.vlan_id }}
      {% endif %}
{% endfor %}

---
# templates/controlplane.yaml.j2
# OpenStackControlPlane configuration
apiVersion: core.openstack.org/v1beta1
kind: OpenStackControlPlane
metadata:
  name: {{ control_plane.name }}
  namespace: openstack
spec:
  secret: osp-secret
  storageClass: {{ storage_class_name }}

  dns:
    template:
      options:
      {% for server in dns_servers %}
        - key: server
          values:
            - {{ server }}
      {% endfor %}
      override:
        service:
          metadata:
            annotations:
              metallb.universe.tf/address-pool: ctlplane
              metallb.universe.tf/allow-shared-ip: ctlplane
              metallb.universe.tf/loadBalancerIPs: {{ networks.ctlplane.metallb_pool.start }}
          spec:
            type: LoadBalancer
      replicas: 2

  cinder:
    apiOverride:
      route: {}
    template:
      databaseInstance: openstack
      secret: osp-secret
      cinderAPI:
        replicas: {{ control_plane.services.cinder.api_replicas }}
        override:
          service:
            internal:
              metadata:
                annotations:
                  metallb.universe.tf/address-pool: internalapi
                  metallb.universe.tf/allow-shared-ip: internalapi
                  metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
              spec:
                type: LoadBalancer
      cinderScheduler:
        replicas: {{ control_plane.services.cinder.scheduler_replicas }}
      cinderBackup:
        networkAttachments:
          - storage
        replicas: {{ control_plane.services.cinder.backup_replicas }}
      cinderVolumes:
        volume1:
          networkAttachments:
            - storage
          replicas: {{ control_plane.services.cinder.volume_replicas }}

  nova:
    apiOverride:
      route: {}
    template:
      apiServiceTemplate:
        replicas: {{ control_plane.services.nova.api_replicas }}
        override:
          service:
            internal:
              metadata:
                annotations:
                  metallb.universe.tf/address-pool: internalapi
                  metallb.universe.tf/allow-shared-ip: internalapi
                  metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
              spec:
                type: LoadBalancer
      metadataServiceTemplate:
        replicas: {{ control_plane.services.nova.metadata_replicas }}
        override:
          service:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/allow-shared-ip: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
            spec:
              type: LoadBalancer
      schedulerServiceTemplate:
        replicas: {{ control_plane.services.nova.scheduler_replicas }}
      cellTemplates:
        cell0:
          cellDatabaseAccount: nova-cell0
          cellDatabaseInstance: openstack
          cellMessageBusInstance: rabbitmq
          hasAPIAccess: true
        cell1:
          cellDatabaseAccount: nova-cell1
          cellDatabaseInstance: openstack-cell1
          cellMessageBusInstance: rabbitmq-cell1
          noVNCProxyServiceTemplate:
            enabled: true
            networkAttachments:
              - ctlplane
          hasAPIAccess: true
      secret: osp-secret

  keystone:
    apiOverride:
      route: {}
    template:
      override:
        service:
          internal:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/allow-shared-ip: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
            spec:
              type: LoadBalancer
      databaseInstance: openstack
      secret: osp-secret
      replicas: {{ control_plane.services.keystone.replicas }}

  glance:
    apiOverrides:
      default:
        route: {}
    template:
      databaseInstance: openstack
      storage:
        storageRequest: {{ control_plane.services.glance.storage_request }}
      secret: osp-secret
      keystoneEndpoint: default
      glanceAPIs:
        default:
          replicas: {{ control_plane.services.glance.api_replicas }}
          override:
            service:
              internal:
                metadata:
                  annotations:
                    metallb.universe.tf/address-pool: internalapi
                    metallb.universe.tf/allow-shared-ip: internalapi
                    metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
                spec:
                  type: LoadBalancer
          networkAttachments:
            - storage

  neutron:
    apiOverride:
      route: {}
    template:
      replicas: {{ control_plane.services.neutron.api_replicas }}
      override:
        service:
          internal:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/allow-shared-ip: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
            spec:
              type: LoadBalancer
      databaseInstance: openstack
      secret: osp-secret
      networkAttachments:
        - internalapi

  barbican:
    apiOverride:
      route: {}
    template:
      databaseInstance: openstack
      secret: osp-secret
      barbicanAPI:
        replicas: {{ control_plane.services.barbican.api_replicas }}
        override:
          service:
            internal:
              metadata:
                annotations:
                  metallb.universe.tf/address-pool: internalapi
                  metallb.universe.tf/allow-shared-ip: internalapi
                  metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
              spec:
                type: LoadBalancer
      barbicanWorker:
        replicas: {{ control_plane.services.barbican.worker_replicas }}
      barbicanKeystoneListener:
        replicas: {{ control_plane.services.barbican.listener_replicas }}

  {% if control_plane.services.swift.enabled %}
  swift:
    enabled: true
    proxyOverride:
      route: {}
    template:
      swiftProxy:
        networkAttachments:
          - storage
        override:
          service:
            internal:
              metadata:
                annotations:
                  metallb.universe.tf/address-pool: internalapi
                  metallb.universe.tf/allow-shared-ip: internalapi
                  metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
              spec:
                type: LoadBalancer
        replicas: {{ control_plane.services.swift.proxy_replicas }}
        secret: osp-secret
      swiftRing:
        ringReplicas: {{ control_plane.services.swift.ring_replicas }}
      swiftStorage:
        networkAttachments:
          - storage
        replicas: {{ control_plane.services.swift.storage_replicas }}
        storageRequest: {{ control_plane.services.swift.storage_request }}
  {% endif %}

  placement:
    apiOverride:
      route: {}
    template:
      override:
        service:
          internal:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/allow-shared-ip: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start }}
            spec:
              type: LoadBalancer
      databaseInstance: openstack
      replicas: {{ control_plane.services.placement.replicas }}
      secret: osp-secret

  ovn:
    template:
      ovnDBCluster:
        ovndbcluster-nb:
          replicas: {{ control_plane.services.ovn.nb_replicas }}
          dbType: NB
          storageRequest: {{ control_plane.services.ovn.db_storage_request }}
          networkAttachment: internalapi
        ovndbcluster-sb:
          replicas: {{ control_plane.services.ovn.sb_replicas }}
          dbType: SB
          storageRequest: {{ control_plane.services.ovn.db_storage_request }}
          networkAttachment: internalapi
      ovnNorthd:
        replicas: {{ control_plane.services.ovn.northd_replicas }}

  galera:
    templates:
      openstack:
        storageRequest: {{ control_plane.services.galera.storage_request }}
        secret: osp-secret
        replicas: {{ control_plane.services.galera.openstack_replicas }}
      openstack-cell1:
        storageRequest: {{ control_plane.services.galera.storage_request }}
        secret: osp-secret
        replicas: {{ control_plane.services.galera.cell1_replicas }}

  rabbitmq:
    templates:
      rabbitmq:
        replicas: {{ control_plane.services.rabbitmq.openstack_replicas }}
        override:
          service:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start | regex_replace('(\d+)$', '85') }}
            spec:
              type: LoadBalancer
      rabbitmq-cell1:
        replicas: {{ control_plane.services.rabbitmq.cell1_replicas }}
        override:
          service:
            metadata:
              annotations:
                metallb.universe.tf/address-pool: internalapi
                metallb.universe.tf/loadBalancerIPs: {{ networks.internalapi.metallb_pool.start | regex_replace('(\d+)$', '86') }}
            spec:
              type: LoadBalancer

  memcached:
    templates:
      memcached:
        replicas: {{ control_plane.services.memcached.replicas }}

  {% if control_plane.services.telemetry.enabled %}
  telemetry:
    enabled: true
    template:
      metricStorage:
        enabled: {{ control_plane.services.telemetry.metric_storage_enabled }}
        dashboardsEnabled: {{ control_plane.services.telemetry.dashboards_enabled }}
        dataplaneNetwork: ctlplane
        networkAttachments:
          - ctlplane
        monitoringStack:
          alertingEnabled: {{ control_plane.services.telemetry.alerting_enabled }}
          scrapeInterval: 30s
          storage:
            strategy: persistent
            retention: 24h
            persistent:
              pvcStorageRequest: {{ control_plane.services.telemetry.storage_request }}
        autoscaling:
          enabled: false
        aodh:
          databaseAccount: aodh
          databaseInstance: openstack
          passwordSelector:
            aodhService: AodhPassword
          rabbitMqClusterName: rabbitmq
          serviceUser: aodh
          secret: osp-secret
          heatInstance: heat
        ceilometer:
          enabled: true
          secret: osp-secret
        logging:
          enabled: false
          ipaddr: {{ networks.internalapi.metallb_pool.start }}
  {% endif %}

---
# templates/dataplane-nodeset.yaml.j2
# OpenStackDataPlaneNodeSet configuration
{% for nodeset in dataplane_nodesets %}
---
apiVersion: dataplane.openstack.org/v1beta1
kind: OpenStackDataPlaneNodeSet
metadata:
  name: {{ nodeset.name }}
  namespace: openstack
spec:
  env:
    - name: ANSIBLE_FORCE_COLOR
      value: "True"
  {% if features.tls_enabled %}
  tlsEnabled: true
  {% endif %}
  networkAttachments:
    - ctlplane
  preProvisioned: {{ nodeset.node_template.pre_provisioned }}

  {% if not nodeset.node_template.pre_provisioned %}
  baremetalSetTemplate:
    deploymentSSHSecret: {{ nodeset.node_template.ansible_ssh_private_key_secret }}
    bmhNamespace: {{ bare_metal.namespace }}
    cloudUserName: {{ bare_metal.cloud_user_name }}
    bmhLabelSelector:
      app: openstack
    ctlplaneInterface: {{ bare_metal.provision_interface }}
  {% endif %}

  nodeTemplate:
    ansibleSSHPrivateKeySecret: {{ nodeset.node_template.ansible_ssh_private_key_secret }}
    {% if nodeset.node_template.persistent_logs_pvc %}
    extraMounts:
      - extraVolType: Logs
        volumes:
          - name: ansible-logs
            persistentVolumeClaim:
              claimName: {{ nodeset.node_template.persistent_logs_pvc }}
        mounts:
          - name: ansible-logs
            mountPath: "/runner/artifacts"
    {% endif %}
    managementNetwork: {{ nodeset.node_template.management_network }}
    ansible:
      ansibleUser: {{ nodeset.node_template.ansible_ssh_user }}
      ansiblePort: 22
      ansibleVarsFrom:
        - secretRef:
            name: subscription-manager
        - secretRef:
            name: redhat-registry
      ansibleVars:
        rhc_release: 9.4
        rhc_repositories:
        {% for repo in rhel_repositories %}
          - {{ repo }}
        {% endfor %}
        edpm_bootstrap_release_version_package: []
        edpm_network_config_os_net_config_mappings:
        {% for node in nodeset.nodes %}
          {{ node.name }}:
            nic1: {{ node.mac_address }}
        {% endfor %}
        neutron_physical_bridge_name: br-ex
        neutron_public_interface_name: eth0
        edpm_network_config_nmstate: true
        edpm_network_config_update: false
        edpm_network_config_template: |
          ---
          {% raw %}
          {% set mtu_list = [ctlplane_mtu] %}
          {% for network in nodeset_networks %}
          {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
          {%- endfor %}
          {% set min_viable_mtu = mtu_list | max %}
          network_config:
          - type: ovs_bridge
            name: {{ neutron_physical_bridge_name }}
            mtu: {{ min_viable_mtu }}
            use_dhcp: false
            dns_servers: {{ ctlplane_dns_nameservers }}
            domain: {{ dns_search_domains }}
            addresses:
            - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
            routes: {{ ctlplane_host_routes }}
            members:
            - type: interface
              name: nic1
              mtu: {{ min_viable_mtu }}
              primary: true
            {% for network in nodeset_networks %}
            - type: vlan
              mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
              vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
              addresses:
              - ip_netmask:
                {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
              routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
            {% endfor %}
          {% endraw %}

  nodes:
  {% for node in nodeset.nodes %}
    {{ node.name }}:
      hostName: {{ node.hostname }}
      networks:
      {% for net in nodeset.node_template.networks %}
        - name: {{ net }}
          subnetName: subnet1
          {% if net == 'ctlplane' %}
          defaultRoute: true
          {% endif %}
          {% if node.node_networks[net] is defined %}
          fixedIP: {{ node.node_networks[net].ip }}
          {% endif %}
      {% endfor %}
      ansible:
        ansibleHost: {{ node.ansible_host }}
        ansibleUser: {{ nodeset.node_template.ansible_ssh_user }}
        ansibleVars:
          fqdn_internal_api: {{ node.fqdn_internal_api }}
      {% if not nodeset.node_template.pre_provisioned %}
      bmhLabelSelector:
        nodeName: {{ node.name }}
      {% endif %}
  {% endfor %}
{% endfor %}

---
# templates/dataplane-deployment.yaml.j2
# OpenStackDataPlaneDeployment configuration
apiVersion: dataplane.openstack.org/v1beta1
kind: OpenStackDataPlaneDeployment
metadata:
  name: data-plane-deploy-{{ environment_name }}
  namespace: openstack
spec:
  nodeSets:
  {% for nodeset in dataplane_nodesets %}
    - {{ nodeset.name }}
  {% endfor %}